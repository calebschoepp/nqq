# Introduction

- You probably just finished the book like I did and are craving Robert's writing style and comforting guidance
- Here let me try and give some of that to you. I'll show you at a high level how to build lists into Clox
- If you haven't read the book I recommend you go do that. That being said I still think you can get some value out of this b/c of 1, 2, 3.

# Overview

- Talk about how and why I find it easier to work from back to front

# Semantics

- Here's how the lists we are building are going to work
- There are of course other ways I could have chose to design them (they are very basic). See challenges for more ideas
- Talk about building lists, indexing, storing, literals, slicing, appending, deleting, references etc.
- Talk about arrays vs lists

# Runtime

- How we are going to represent lists in Clox
- Dynamic arrays
- Talk about linked lists as an alternative implementation and show Big O
- Show some code

# Bytecode

- What bytecode are we going to compile the source to so that our vm can execute it
- Talk about the opcodes we need, why are these the only ones we need
- Show some code for the opcodes and how it leverages the runtime
- Allude to OP_BUILD_SLICE
- Comment about how if we were to hand compile some bytecode it should work now

# Parsing/Compilation

- Show the formal grammar here (maybe I should show it at the top?)
- If I show the grammar here I can make a comment about "now that we are getting into the guts of parsing we should establish our formal grammar"
- Show code for parsing and updates to the pratt parser table
- Comment about how adding the parsing was suprisingly straightforward after defining the grammar

# Lexing

- Comment on how it is a joke and so easy
- Show code for new '[' and ']' tokens

# Interlude

- So we've got working lists... kinda
- We should be proud of ourselves, lists really open up a lot of opportunties with Clox and make it less aids to program in
- But we need to iron out a few important things first

# Tests (OPTIONAL)

- Talk about important edge cases to test out
- Maybe show some tests?

# Garbage Collection

- Show the necessary code to add to wire garbage collection
- Talk about how much of a pain it was to do this and the bugs I encountered

# List equality

- Show list equality code
- By reference or by value

# Strings

- Adding support for strings

# Append/Delete/Len/List functions

- The astute reader will notice we haven't used parts of the runtime yet
- Adding functions to support
- Should this go in the runtime or bytecode sections?

# Conclusion

- Review what was done
- Talk about what we can do with lists in Clox now
- Mention how I'm planning to do a post like this with map types in Clox

## Challenges

1. Slices and reverse indexing
2. append and delete as key words, as methods
3. Iterators and strings, unified theory
4. Deallocate memory on delete